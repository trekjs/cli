#!/usr/bin/env node

'use strict'

const path = require('path')
const spawn = require('win-fork')
const fs = require('fs')
const join = path.join
const resolve = path.resolve
const stat = fs.statSync
const exists = fs.existsSync
const abbrev = require('abbrev')
const program = require('commander')
const chalk = require('chalk')
const utils = require('../lib/utils')
const pad = utils.pad
const deref = utils.deref

const pkg = require(path.join(__dirname, '../package'))
const title = process.title = 'trek'
const cmdList = require('./commands')
const aliasNames = cmdList.filter((c) => !!c.alias).map((c) => c.alias)
const fullList = cmdList.map((c) => c.name).concat(aliasNames)
const abbrevs = abbrev(fullList)

program
  .version(pkg.version)
  .description(chalk.green(pkg.description))
  .usage('<command> [options]')

program.on('--help', () => {
  console.log('  Commands:')
  console.log()
  cmdList.forEach((c) => {
    const alias = c.alias ? `|${chalk.bold.blue(c.alias)}` : ''
    const name = `${chalk.blue(c.name)}${alias}`
    console.log('    ' + pad(name, 44) + (c.description || ''))
  })
  console.log()
  // http://the.sunnyspot.org/asciiart/gallery/startrek.html
  console.log(chalk.bold.green(fs.readFileSync(__dirname + '/trek.txt', 'utf8')))
  console.log()

  process.exit()
})

program.parse(process.argv)

// args void of cmd

var args = process.argv.slice(3)

// command

var cmd = program.args[0]

// display help

if (!cmd) program.help()

// alias

cmd = deref(cmd, abbrevs, cmdList) || cmd

// executable

var bin = title + '-' + cmd

// local or resolve to absolute executable path

var local = join(__dirname, bin)

if (exists(local)) {
  bin = local
} else {
  bin = process.env.PATH
    .split(path.delimiter)
    .reduce((binary, p) => {
      p = resolve(p, bin)
      return exists(p) && stat(p).isFile() ? p : binary
    }, bin)
}

// display help if bin does not exist

if (!exists(bin)) {
  console.error('\n  %s(1) does not exist', chalk.bold.red(bin))
  program.help()
}

// spawn

var proc = spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] })

proc.on('close', (code) => {
  process.exit(code)
})
