#!/usr/bin/env node

'use strict'

const chalk = require('chalk')
const fs = require('fs-extra')
const path = require('path')
const mkdirp = require('mkdirp')
const readline = require('readline')
const templatly = require('templatly')
const program = require('commander')

// options

program
  .usage('[options] [dir]')
  .option('-o, --orm <orm>', 'selecte an ORM. Default: '
          + chalk.cyan('sequelize')
          + ' (options: bookshelf/sequelize/waterline/mongoose)', 'sequelize')
  .option('-d, --database <database>', 'selecte a database. Default: '
          + chalk.cyan('postgresql')
          +' (options: mongodb/mariadb/mysql/postgresql/sqlite3)', 'postgresql')
  .option('-E, --skip-env', 'don\'t create .env.{development,production,test}')
  .option('-G, --skip-git', 'don\'t create .gitignore file')
  .option('-b, --babel', 'use ES6+ with babel')
  .option('-l, --lint', 'use linter for project', 'eslint')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv)

// CLI

before(program, 'outputHelp', () => {
  program.allowUnknownOption()
})

program.on('--help', () => {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create app'))
  console.log(chalk.bold.blue('    $ trek new'))
  console.log()
  console.log(chalk.gray('    # create app, selected an orm and a dabatase'))
  console.log(chalk.bold.blue('    $ trek new -o sequelize -d mariadb'))
  console.log()
  console.log()
  process.exit()
})

process.on('exit', () => {
  console.log()
})

main()

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method]

  obj[method] = function () {
    fn.call(this)
    old.apply(this, arguments)
  }
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  })

  rl.question(msg, (input) => {
    rl.close()
    callback(/^y|yes|ok|true$/i.test(input))
  })
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplication(appName, appPath) {
  const wait = 5

  // app template path
  const APP_TEMPLATE_PATH = path.join(__dirname, '..', 'templates', 'app')

  // copy files
  copy('app')
  copy('config')
  copy('log')
  copy('public')
  copy('test')
  copy('server.js')
  copy('.babelrc')
  copy('.editorconfig')
  copy('.eslintrc')
  copy('.travis.yml')
  copy('gitignore', true)
  copy('gitattributes', true)
  copy('docker-compose.yml')
  write('package.json', { name: appName })
  write('README.md', { name: appName })

  // copy files
  function copy(src, dot) {
    const dest = path.join(appPath, (dot ? '.' : '') + src)
    src = path.join(APP_TEMPLATE_PATH, src)
    console.log(' * %s', chalk.green(dest))
    fs.copySync.call(null, src, dest)
  }

  // template, render and write file
  function write(src, data) {
    const content = fs.readFileSync(path.join(APP_TEMPLATE_PATH, src))
    const pkg = templatly(content, data || {})
    const dest = path.join(appPath, src)
    console.log(' * %s', chalk.green(dest))
    fs.writeFileSync(dest, pkg)
  }

  function mkdir(dir) {
    dir = path.join(appPath, dir)
    return mkdirp.sync(dir)
  }
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, (err, files) => {
    if (err && 'ENOENT' != err.code) throw err
    fn(!files || !files.length)
  })
}

/**
 * Main program.
 */

function main() {

  // Path
  const destinationPath = program.args.shift() || '.'

  // App name
  const appName = path.basename(path.resolve(destinationPath))

  // Generate application
  emptyDirectory(destinationPath, (empty) => {
    if (empty || program.force) {
      createApplication(appName, destinationPath)
    } else {
      confirm('destination is not empty, continue? [y/N] ', (ok) => {
        if (ok) {
          process.stdin.destroy()
          createApplication(appName, destinationPath)
        } else {
          console.error('aborting')
          process.exit(1)
        }
      })
    }
  })
}
